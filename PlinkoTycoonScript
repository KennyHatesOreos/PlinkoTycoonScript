-- Safely load Rayfield UI library
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)

if not success or not Rayfield then
    warn("‚ö†Ô∏è Failed to load Rayfield UI library.")
    return
end

-- Create the main window
local Window = Rayfield:CreateWindow({
    Name = "Plinko Tycoon",
    LoadingTitle = "Loading OreoHub",
    LoadingSubtitle = "By OreoScripts",
    Theme = "DarkBlue",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "OreoHub",
        FileName = "PlinkoTycoonr"
    },
KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Oreo Plinko Tycoon",
      Subtitle = "Key System",
      Note = " Check Youtube Description", -- Use this to tell the user how to get a key
      FileName = "OreoSexKey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Oreo"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

-- Helper to walk a path to a remote/function
local function getRemote(path)
    local current = game:GetService("ReplicatedStorage")
    for _, part in ipairs(path) do
        current = current:FindFirstChild(part)
        if not current then
            warn("‚ùå Missing path segment:", part)
            return nil
        end
    end
    return current
end

-- === TAB: Balls ===
local BallsTab = Window:CreateTab("Balls", 4483362458)

BallsTab:CreateButton({
    Name = "5 Million",
    Callback = function()
        local args = { [1] = 25 }
        local remote = getRemote({"rbxts_include", "node_modules", "@rbxts", "remo", "src", "container", "plinko.onBallCollected"})
        if remote then
            for i = 1, 50 do
                remote:FireServer(unpack(args))
            end
            print("‚úÖ")
        end
    end,
})

BallsTab:CreateButton({
    Name = "15 Billion",
    Callback = function()
        local args = { [1] = 25 }
        local remote = getRemote({"rbxts_include", "node_modules", "@rbxts", "remo", "src", "container", "plinko.onBallCollected"})
        if remote then
            for i = 1, 50 do
                remote:FireServer(unpack(args))
            end
            print("‚úÖ")
        end
    end,
})

BallsTab:CreateButton({
    Name = "Upcap Ball Limit",
    Callback = function()
        local remote = getRemote({"rbxts_include", "node_modules", "@rbxts", "remo", "src", "container", "settings.setBallLimit"})
        if remote then
            remote:FireServer(9999999)
            print("‚úÖ")
        end
    end,
})

BallsTab:CreateDivider()

BallsTab:CreateButton({
    Name = "Crash Client/Server",
    Callback = function()
        local remote = getRemote({"rbxts_include", "node_modules", "@rbxts", "remo", "src", "container", "plinko.onBallCollected"})
        if remote then
            warn("‚ö†Ô∏è Crash loop skipped in debug mode.")
            -- for i = 1, 5000000 do
            --     remote:FireServer(1)
            -- end
        end
    end,
})

-- === TAB: Pets ===
local PetsTab = Window:CreateTab("Pets", 4483362458)
PetsTab:CreateSection("Pets")

local EquipBest = getRemote({"rbxts_include", "node_modules", "@rbxts", "remo", "src", "container", "pets.equipBest"})
local toggleEquip = false

PetsTab:CreateToggle({
    Name = "Equip Best",
    CurrentValue = false,
    Flag = "ToggleEquip",
    Callback = function(state)
        toggleEquip = state
        if state and EquipBest then
            EquipBest:InvokeServer()
            print("‚úÖ")
        end
    end,
})

-- === TAB: Eggs ===
local EggsTab = Window:CreateTab("Eggs", 4483362458)
EggsTab:CreateSection("Eggs")

local eggArgs = { "Dragon", 1 }
local eggRemote = getRemote({"rbxts_include", "node_modules", "@rbxts", "remo", "src", "container", "eggs.open"})
local autoOpen = false
local eggThread = nil

EggsTab:CreateToggle({
    Name = "Auto Open Dragon Egg",
    CurrentValue = false,
    Flag = "AutoEgg",
    Callback = function(value)
        autoOpen = value

        if value and eggRemote then
            if eggThread then
                warn("üü° Egg loop already running, skipping duplicate.")
                return
            end
            eggThread = task.spawn(function()
                while autoOpen do
                    local ok, err = pcall(function()
                        eggRemote:InvokeServer(unpack(eggArgs))
                    end)
                    if not ok then
                        warn("‚ùå Egg remote call failed:", err)
                        break
                    end
                    wait(0.5)
                end
                eggThread = nil
            end)
        else
            autoOpen = false
            eggThread = nil
        end
    end,
})

-- === TAB: Rebirth ===
local RebirthTab = Window:CreateTab("Rebirth", 4483362458)
RebirthTab:CreateSection("Rebirth")

local rebirthRemote = getRemote({"rbxts_include", "node_modules", "@rbxts", "remo", "src", "container", "rebirth"})

RebirthTab:CreateToggle({
    Name = "Auto Rebirth",
    CurrentValue = false,
    Flag = "AutoRebirth",
    Callback = function(value)
        getgenv().AutoRebirth = value
        if value and rebirthRemote then
            spawn(function()
                while getgenv().AutoRebirth do
                    rebirthRemote:InvokeServer()
                    task.wait(1)
                end
            end)
        end
    end,
})

-- Load configuration
Rayfield:LoadConfiguration()
